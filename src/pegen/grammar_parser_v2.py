#!/usr/bin/env python
# @generated by pegen from src/pegen/metagrammar_v2.gram

from typing import Any, Optional
from pegen.parser_v2 import (memoize, memoize_left_rec, logger,
                             DefaultParser, CharBasedParser, RuleResult, RuleResultValue,
                             success, failure)
#from pegen.parser_v2_old import memoize, memoize_left_rec, logger, DefaultParser, CharBasedParser #type:ignore
from ast import literal_eval
from typing import List, Union
import token
import tokenize
from tokenize import TokenInfo

from pegen.grammar_v2 import (
    Alt,
    #Action,
    GrammarItem,
    Cut,
    ExternDecl,
    Forced,
    Gather,
    Group,
    Item,
    Lookahead,
    LookaheadOrCut,
    MetaTuple,
    NameLeaf,
    TopLevelItem,
    NegativeLookahead,
    Opt,
    Plain,
    PositiveLookahead,
    Repeat0,
    Repeat1,
    Rhs,
    Rule,
    RuleName,
    Grammar,
    StringLeaf,
)

#TODO: Blocks (having its own return) vs. expressions
def _normalize_linecol(tokens: List[TokenInfo]) -> List[TokenInfo]:
    if not tokens:
        return []
    # first token has line 1
    first_line = tokens[0].start[0]
    line_subtract = tokens[0].start[0] - 1  # Start with line 1
    column_subtract = tokens[0].start[1]  # Start with column 0
    def replace(t: TokenInfo) -> TokenInfo:
        if t.start[0] == first_line:
            return t._replace(start=(t.start[0] - line_subtract, t.start[1] - column_subtract),
                              end=(t.end[0] - line_subtract, t.end[1] - column_subtract))
        else:
            return t._replace(start=(t.start[0] - line_subtract, t.start[1]),
                              end=(t.end[0] - line_subtract, t.end[1]))
    return list(map(replace, tokens))


class Base(DefaultParser):
    @memoize
    def action_contents(self) -> Optional[str]:
        """Note: The result should be parsable by ast.parse."""
        m = self.mark()
        level = 1
        has_return_stmt = False
        tokens = []
        prevmark = m
        while True:
            t = self._tokenizer.peek()
            if t.type == token.ENDMARKER:
                self.reset(m)
                return None
            self._tokenizer.getnext()
            if t.string == "}":
                level -= 1
                if level == 0:
                    break
            tokens.append(t)
            if t.string == "{":
                level += 1
            elif t.string == "return":
                has_return_stmt = True
            prevmark = self.mark()
        self.reset(prevmark) # Don't consume the last right brace
        tokens = _normalize_linecol(tokens)
        s = tokenize.untokenize(tokens)
        if self._verbose:
            print("##", repr(s))
        return s

# Keywords and soft keywords are listed at the end of the parser definition.
class GeneratedParser(Base):

    @memoize
    def start(self) -> RuleResult[Grammar]:
        # start: grammar $
        mark = self.mark()
        if (
            (r_grammar := (self.grammar())).ok
            and
            (self.endmarker()).ok
        ):
            grammar = r_grammar.value
            return [grammar, r_grammar]
        self.reset(mark)
        return failure[Grammar]()

    @memoize
    def grammar(self) -> RuleResult[Grammar]:
        # grammar: metas? rules extern_rules?
        mark = self.mark()
        if (
            (r_metas := (success(_temp.value) if (_temp := (self.metas())).ok else success(RuleResultValue.FAIL_OK))).ok
            and
            (r_rules := (self.rules())).ok
            and
            (r_extern_rules := (success(_temp_1.value) if (_temp_1 := (self.extern_rules())).ok else success(RuleResultValue.FAIL_OK))).ok
        ):
            metas = r_metas.value
            rules = r_rules.value
            extern_rules = r_extern_rules.value
            return Grammar(rules, extern_rules or [], metas or [])
        self.reset(mark)
        return failure[Grammar]()

    @memoize
    def metas(self) -> RuleResult[List [MetaTuple]]:
        # metas: meta metas | meta
        mark = self.mark()
        if (
            (r_meta := (self.meta())).ok
            and
            (r_metas := (self.metas())).ok
        ):
            meta = r_meta.value
            metas = r_metas.value
            return [meta] + metas
        self.reset(mark)
        if (
            (r_meta := (self.meta())).ok
        ):
            meta = r_meta.value
            return [meta]
        self.reset(mark)
        return failure[List [MetaTuple]]()

    @memoize
    def meta(self) -> RuleResult[MetaTuple]:
        # meta: "@" NAME NEWLINE | "@" NAME NAME NEWLINE | "@" NAME STRING NEWLINE
        mark = self.mark()
        if (
            (self.match_string("@")).ok
            and
            (r_name := (self.name())).ok
            and
            (self.newline()).ok
        ):
            name = r_name.value
            return (name.string, None)
        self.reset(mark)
        if (
            (self.match_string("@")).ok
            and
            (r_a := (self.name())).ok
            and
            (r_b := (self.name())).ok
            and
            (self.newline()).ok
        ):
            a = r_a.value
            b = r_b.value
            return (a.string, b.string)
        self.reset(mark)
        if (
            (self.match_string("@")).ok
            and
            (r_name := (self.name())).ok
            and
            (r_string := (self.string())).ok
            and
            (self.newline()).ok
        ):
            name = r_name.value
            string = r_string.value
            return (name.string, literal_eval(string.string))
        self.reset(mark)
        return failure[MetaTuple]()

    @memoize
    def rules(self) -> RuleResult[List [Rule]]:
        # rules: rule rules | rule
        mark = self.mark()
        if (
            (r_rule := (self.rule())).ok
            and
            (r_rules := (self.rules())).ok
        ):
            rule = r_rule.value
            rules = r_rules.value
            return [rule] + rules
        self.reset(mark)
        if (
            (r_rule := (self.rule())).ok
        ):
            rule = r_rule.value
            return [rule]
        self.reset(mark)
        return failure[List [Rule]]()

    @memoize
    def rule(self) -> RuleResult[Rule]:
        # rule: rulename memoflag? ":" rule_rhs
        mark = self.mark()
        if (
            (r_rulename := (self.rulename())).ok
            and
            (r_opt := (success(_temp.value) if (_temp := (self.memoflag())).ok else success(RuleResultValue.FAIL_OK))).ok
            and
            (self.match_string(":")).ok
            and
            (r_rule_rhs := (self.rule_rhs())).ok
        ):
            rulename = r_rulename.value
            opt = r_opt.value
            rule_rhs = r_rule_rhs.value
            return Rule(rulename[0], rulename[1], rule_rhs, memo=opt)
        self.reset(mark)
        return failure[Rule]()

    @memoize
    def extern_rules(self) -> RuleResult[List [ExternDecl]]:
        # extern_rules: extern_rule extern_rules | extern_rule
        mark = self.mark()
        if (
            (r_extern_rule := (self.extern_rule())).ok
            and
            (r_extern_rules := (self.extern_rules())).ok
        ):
            extern_rule = r_extern_rule.value
            extern_rules = r_extern_rules.value
            return [extern_rule] + extern_rules
        self.reset(mark)
        if (
            (r_extern_rule := (self.extern_rule())).ok
        ):
            extern_rule = r_extern_rule.value
            return [extern_rule]
        self.reset(mark)
        return failure[List [ExternDecl]]()

    @memoize
    def extern_rule(self) -> RuleResult[ExternDecl]:
        # extern_rule: "extern" NAME annotation? NEWLINE
        mark = self.mark()
        if (
            (self.match_string("extern")).ok
            and
            (r_name := (self.name())).ok
            and
            (r_ann := (success(_temp.value) if (_temp := (self.annotation())).ok else success(RuleResultValue.FAIL_OK))).ok
            and
            (self.newline()).ok
        ):
            name = r_name.value
            ann = r_ann.value
            return ExternDecl(name.string, ann)
        self.reset(mark)
        return failure[ExternDecl]()

    @memoize
    def rulename(self) -> RuleResult[RuleName]:
        # rulename: NAME annotation | NAME
        mark = self.mark()
        if (
            (r_name := (self.name())).ok
            and
            (r_annotation := (self.annotation())).ok
        ):
            name = r_name.value
            annotation = r_annotation.value
            return (name.string, annotation)
        self.reset(mark)
        if (
            (r_name := (self.name())).ok
        ):
            name = r_name.value
            return (name.string, None)
        self.reset(mark)
        return failure[RuleName]()

    @memoize
    def rule_rhs(self) -> RuleResult[Rhs]:
        # rule_rhs: alts? NEWLINE INDENT more_alts DEDENT | NEWLINE INDENT alt NEWLINE DEDENT | alts NEWLINE
        mark = self.mark()
        if (
            (r_alts := (success(_temp.value) if (_temp := (self.alts())).ok else success(RuleResultValue.FAIL_OK))).ok
            and
            (self.newline()).ok
            and
            (self.indent()).ok
            and
            (r_more_alts := (self.more_alts())).ok
            and
            (self.dedent()).ok
        ):
            alts = r_alts.value
            more_alts = r_more_alts.value
            return Rhs(alts.alts + more_alts.alts) if alts else more_alts
        self.reset(mark)
        if (
            (self.newline()).ok
            and
            (self.indent()).ok
            and
            (r_alt := (self.alt())).ok
            and
            (self.newline()).ok
            and
            (self.dedent()).ok
        ):
            alt = r_alt.value
            return Rhs([alt])
        self.reset(mark)
        if (
            (r_alts := (self.alts())).ok
            and
            (self.newline()).ok
        ):
            alts = r_alts.value
            return alts
        self.reset(mark)
        return failure[Rhs]()

    @memoize
    def memoflag(self) -> RuleResult[str]:
        # memoflag: '(' "memo" ')'
        mark = self.mark()
        if (
            (self.match_string('(')).ok
            and
            (self.match_string("memo")).ok
            and
            (self.match_string(')')).ok
        ):
            return "memo"
        self.reset(mark)
        return failure[str]()

    @memoize
    def alts(self) -> RuleResult[Rhs]:
        # alts: alt "|" alts | alt
        mark = self.mark()
        if (
            (r_alt := (self.alt())).ok
            and
            (self.match_string("|")).ok
            and
            (r_alts := (self.alts())).ok
        ):
            alt = r_alt.value
            alts = r_alts.value
            return Rhs([alt] + alts.alts)
        self.reset(mark)
        if (
            (r_alt := (self.alt())).ok
        ):
            alt = r_alt.value
            return Rhs([alt])
        self.reset(mark)
        return failure[Rhs]()

    @memoize
    def more_alts(self) -> RuleResult[Rhs]:
        # more_alts: "|" alts NEWLINE more_alts | "|" alts NEWLINE
        mark = self.mark()
        if (
            (self.match_string("|")).ok
            and
            (r_alts := (self.alts())).ok
            and
            (self.newline()).ok
            and
            (r_more_alts := (self.more_alts())).ok
        ):
            alts = r_alts.value
            more_alts = r_more_alts.value
            return Rhs(alts.alts + more_alts.alts)
        self.reset(mark)
        if (
            (self.match_string("|")).ok
            and
            (r_alts := (self.alts())).ok
            and
            (self.newline()).ok
        ):
            alts = r_alts.value
            return Rhs(alts.alts)
        self.reset(mark)
        return failure[Rhs]()

    @memoize
    def alt(self) -> RuleResult[Alt]:
        # alt: items '$' action | items '$' | items action | items | '$'
        mark = self.mark()
        if (
            (r_items := (self.items())).ok
            and
            (self.match_string('$')).ok
            and
            (r_action := (self.action())).ok
        ):
            items = r_items.value
            action = r_action.value
            return Alt(items + [TopLevelItem(None, NameLeaf('ENDMARKER'))], action=action)
        self.reset(mark)
        if (
            (r_items := (self.items())).ok
            and
            (self.match_string('$')).ok
        ):
            items = r_items.value
            return Alt(items + [TopLevelItem(None, NameLeaf('ENDMARKER'))], action=None)
        self.reset(mark)
        if (
            (r_items := (self.items())).ok
            and
            (r_action := (self.action())).ok
        ):
            items = r_items.value
            action = r_action.value
            return Alt(items, action=action)
        self.reset(mark)
        if (
            (r_items := (self.items())).ok
        ):
            items = r_items.value
            return Alt(items, action=None)
        self.reset(mark)
        if (
            (self.match_string('$')).ok
        ):
            return Alt([], action=None)
        self.reset(mark)
        return failure[Alt]()

    @memoize
    def items(self) -> RuleResult[List [TopLevelItem]]:
        # items: top_level_item items | top_level_item
        mark = self.mark()
        if (
            (r_top_level_item := (self.top_level_item())).ok
            and
            (r_items := (self.items())).ok
        ):
            top_level_item = r_top_level_item.value
            items = r_items.value
            return [top_level_item] + items
        self.reset(mark)
        if (
            (r_top_level_item := (self.top_level_item())).ok
        ):
            top_level_item = r_top_level_item.value
            return [top_level_item]
        self.reset(mark)
        return failure[List [TopLevelItem]]()

    @memoize
    def top_level_item(self) -> RuleResult[TopLevelItem]:
        # top_level_item: NAME annotation '=' ~ item | NAME '=' ~ item | item | top_level_others
        mark = self.mark()
        cut = False
        if (
            (r_name := (self.name())).ok
            and
            (r_annotation := (self.annotation())).ok
            and
            (self.match_string('=')).ok
            and
            (cut := (success[bool]()).ok)
            and
            (r_item := (self.item())).ok
        ):
            name = r_name.value
            annotation = r_annotation.value
            item = r_item.value
            return TopLevelItem(name.string, item, annotation)
        self.reset(mark)
        if cut:
            return None
        cut = False
        if (
            (r_name := (self.name())).ok
            and
            (self.match_string('=')).ok
            and
            (cut := (success[bool]()).ok)
            and
            (r_item := (self.item())).ok
        ):
            name = r_name.value
            item = r_item.value
            return TopLevelItem(name.string, item)
        self.reset(mark)
        if cut:
            return None
        if (
            (r_item := (self.item())).ok
        ):
            item = r_item.value
            return TopLevelItem(None, item)
        self.reset(mark)
        if (
            (r_it := (self.top_level_others())).ok
        ):
            it = r_it.value
            return TopLevelItem(None, it)
        self.reset(mark)
        return failure[TopLevelItem]()

    @memoize
    def top_level_others(self) -> RuleResult[LookaheadOrCut]:
        # top_level_others: '&' '&' ~ atom | '&' ~ atom | '!' ~ atom | '~'
        mark = self.mark()
        cut = False
        if (
            (self.match_string('&')).ok
            and
            (self.match_string('&')).ok
            and
            (cut := (success[bool]()).ok)
            and
            (r_atom := (self.atom())).ok
        ):
            atom = r_atom.value
            return Forced(atom)
        self.reset(mark)
        if cut:
            return None
        cut = False
        if (
            (self.match_string('&')).ok
            and
            (cut := (success[bool]()).ok)
            and
            (r_atom := (self.atom())).ok
        ):
            atom = r_atom.value
            return PositiveLookahead(atom)
        self.reset(mark)
        if cut:
            return None
        cut = False
        if (
            (self.match_string('!')).ok
            and
            (cut := (success[bool]()).ok)
            and
            (r_atom := (self.atom())).ok
        ):
            atom = r_atom.value
            return NegativeLookahead(atom)
        self.reset(mark)
        if cut:
            return None
        if (
            (self.match_string('~')).ok
        ):
            return Cut()
        self.reset(mark)
        return failure[LookaheadOrCut]()

    @memoize
    def item(self) -> RuleResult[Item]:
        # item: '[' ~ alts ']' | atom '?' | atom '*' | atom '+' | atom '.' atom '+' | atom
        mark = self.mark()
        cut = False
        if (
            (self.match_string('[')).ok
            and
            (cut := (success[bool]()).ok)
            and
            (r_alts := (self.alts())).ok
            and
            (self.match_string(']')).ok
        ):
            alts = r_alts.value
            return Opt(Group(alts))
        self.reset(mark)
        if cut:
            return None
        if (
            (r_atom := (self.atom())).ok
            and
            (self.match_string('?')).ok
        ):
            atom = r_atom.value
            return Opt(atom)
        self.reset(mark)
        if (
            (r_atom := (self.atom())).ok
            and
            (self.match_string('*')).ok
        ):
            atom = r_atom.value
            return Repeat0(atom)
        self.reset(mark)
        if (
            (r_atom := (self.atom())).ok
            and
            (self.match_string('+')).ok
        ):
            atom = r_atom.value
            return Repeat1(atom)
        self.reset(mark)
        if (
            (r_sep := (self.atom())).ok
            and
            (self.match_string('.')).ok
            and
            (r_node := (self.atom())).ok
            and
            (self.match_string('+')).ok
        ):
            sep = r_sep.value
            node = r_node.value
            return Gather(sep, node)
        self.reset(mark)
        if (
            (r_atom := (self.atom())).ok
        ):
            atom = r_atom.value
            return atom
        self.reset(mark)
        return failure[Item]()

    @memoize
    def atom(self) -> RuleResult[Plain]:
        # atom: '(' ~ alts ')' | NAME | STRING
        mark = self.mark()
        cut = False
        if (
            (self.match_string('(')).ok
            and
            (cut := (success[bool]()).ok)
            and
            (r_alts := (self.alts())).ok
            and
            (self.match_string(')')).ok
        ):
            alts = r_alts.value
            return Group(alts)
        self.reset(mark)
        if cut:
            return None
        if (
            (r_name := (self.name())).ok
        ):
            name = r_name.value
            return NameLeaf(name.string)
        self.reset(mark)
        if (
            (r_string := (self.string())).ok
        ):
            string = r_string.value
            return StringLeaf(string.string)
        self.reset(mark)
        return failure[Plain]()

    @memoize
    def action(self) -> RuleResult[str]:
        # action: "{" ~ action_contents "}"
        mark = self.mark()
        cut = False
        if (
            (self.match_string("{")).ok
            and
            (cut := (success[bool]()).ok)
            and
            (r_action_contents := (self.action_contents())).ok
            and
            (self.match_string("}")).ok
        ):
            action_contents = r_action_contents.value
            return action_contents
        self.reset(mark)
        if cut:
            return None
        return failure[str]()

    @memoize
    def annotation(self) -> RuleResult[str]:
        # annotation: "[" ~ target_atoms "]"
        mark = self.mark()
        cut = False
        if (
            (self.match_string("[")).ok
            and
            (cut := (success[bool]()).ok)
            and
            (r_target_atoms := (self.target_atoms())).ok
            and
            (self.match_string("]")).ok
        ):
            target_atoms = r_target_atoms.value
            return target_atoms
        self.reset(mark)
        if cut:
            return None
        return failure[str]()

    @memoize
    def target_atoms(self) -> RuleResult[str]:
        # target_atoms: target_atom target_atoms | target_atom
        mark = self.mark()
        if (
            (r_target_atom := (self.target_atom())).ok
            and
            (r_target_atoms := (self.target_atoms())).ok
        ):
            target_atom = r_target_atom.value
            target_atoms = r_target_atoms.value
            return target_atom + " " + target_atoms
        self.reset(mark)
        if (
            (r_target_atom := (self.target_atom())).ok
        ):
            target_atom = r_target_atom.value
            return target_atom
        self.reset(mark)
        return failure[str]()

    @memoize
    def target_atom(self) -> RuleResult[str]:
        # target_atom: "{" ~ target_atoms? "}" | "[" ~ target_atoms? "]" | NAME "*" | NAME | NUMBER | STRING | FSTRING_START target_fstring_middle* FSTRING_END | "?" | ":" | !"}" !"]" OP
        mark = self.mark()
        cut = False
        if (
            (self.match_string("{")).ok
            and
            (cut := (success[bool]()).ok)
            and
            (r_atoms := (success(_temp.value) if (_temp := (self.target_atoms())).ok else success(RuleResultValue.FAIL_OK))).ok
            and
            (self.match_string("}")).ok
        ):
            atoms = r_atoms.value
            return "{" + (atoms or "") + "}"
        self.reset(mark)
        if cut:
            return None
        cut = False
        if (
            (self.match_string("[")).ok
            and
            (cut := (success[bool]()).ok)
            and
            (r_atoms := (success(_temp.value) if (_temp := (self.target_atoms())).ok else success(RuleResultValue.FAIL_OK))).ok
            and
            (self.match_string("]")).ok
        ):
            atoms = r_atoms.value
            return "[" + (atoms or "") + "]"
        self.reset(mark)
        if cut:
            return None
        if (
            (r_name := (self.name())).ok
            and
            (self.match_string("*")).ok
        ):
            name = r_name.value
            return name.string + "*"
        self.reset(mark)
        if (
            (r_name := (self.name())).ok
        ):
            name = r_name.value
            return name.string
        self.reset(mark)
        if (
            (r_number := (self.number())).ok
        ):
            number = r_number.value
            return number.string
        self.reset(mark)
        if (
            (r_string := (self.string())).ok
        ):
            string = r_string.value
            return string.string
        self.reset(mark)
        if (
            (r_l := (self.fstring_start())).ok
            and
            (r_m := (self._loop0_1())).ok
            and
            (r_r := (self.fstring_end())).ok
        ):
            l = r_l.value
            m = r_m.value
            r = r_r.value
            return l.string + "".join(m) + r.string
        self.reset(mark)
        if (
            (self.match_string("?")).ok
        ):
            return "?"
        self.reset(mark)
        if (
            (self.match_string(":")).ok
        ):
            return ":"
        self.reset(mark)
        if (
            (self.negative_lookahead(self.match_string, "}")).ok
            and
            (self.negative_lookahead(self.match_string, "]")).ok
            and
            (r_op := (self.op())).ok
        ):
            op = r_op.value
            return op.string
        self.reset(mark)
        return failure[str]()

    @memoize
    def target_fstring_middle(self) -> RuleResult[str]:
        # target_fstring_middle: FSTRING_MIDDLE | "{" | "}" | target_atom
        mark = self.mark()
        if (
            (r_fstring_middle := (self.fstring_middle())).ok
        ):
            fstring_middle = r_fstring_middle.value
            return fstring_middle.string
        self.reset(mark)
        if (
            (self.match_string("{")).ok
        ):
            return "{"
        self.reset(mark)
        if (
            (self.match_string("}")).ok
        ):
            return "}"
        self.reset(mark)
        if (
            (r_target_atom := (self.target_atom())).ok
        ):
            target_atom = r_target_atom.value
            return target_atom
        self.reset(mark)
        return failure[str]()

    @memoize
    def _loop0_1(self) -> RuleResult[Any]:
        # _loop0_1: target_fstring_middle
        mark = self.mark()
        children = []
        while (
            (r_target_fstring_middle := (self.target_fstring_middle())).ok
        ):
            target_fstring_middle = r_target_fstring_middle.value
            children.append([target_fstring_middle, r_target_fstring_middle])
            mark = self.mark()
        self.reset(mark)
        return success[Any](children)

    KEYWORDS = ()
    SOFT_KEYWORDS = ('extern', 'memo')


if __name__ == '__main__':
    from pegen.parser_v2 import simple_parser_main
    simple_parser_main(GeneratedParser)
