
[project]
name = "pegen"
description = "CPython's PEG parser generator"
readme = "README.md"
requires-python = ">=3.8, <4"
license = {file = "LICENSE"}
authors = [
    {name = "Guido van Rossum"},
    {name = "Pablo Galindo", email = "pablogsal@gmail.com"},
    {name = "Lysandros Nikolaou", email = "lisandrosnik@gmail.com"},
    {name = "studyingegret", email = "a3times7@outlook.com"}
]
maintainers = [
    {name = "Matthieu C. Dartiailh", email = "m.dartiailh@gmail.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Compilers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
]
keywords = ["parser", "CPython", "PEG", "pegen"]
dynamic = ["version"]

[project.optional-dependencies]
docs = ["sphinx", "sphinx-copybutton", "furo"]
lint = ["black", "flake8", "mypy"]
test = ["pytest", "pytest-cov"]
memory = ["psutil"]
web = ["flask", "flask-wtf"]

[project.urls]
Homepage = "https://github.com/we-like-parsers/pegen"
Documentation = "https://we-like-parsers.github.io/pegen/"
Source = "https://github.com/we-like-parsers/pegen"
Changelog = "https://github.com/we-like-parsers/pegen/releasenotes.rst"
"Bug reports" = "https://github.com/we-like-parsers/pegen/issues"

[build-system]
requires = ["setuptools>=61.2", "wheel", "setuptools_scm[toml]>=3.4.3"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
# Do not determine package version from non-version tags
git_describe_command = 'git describe --long --match "v[0123456789].*"'

[tool.black]
line-length = 99
target_version = ['py38']
exclude = '''
(
      /pegen/grammar_parser.py            # generated file
    | /tests/python_parser/data/          # test files
    | /tests/python_parser/parser_cache/  # generated parser
)
'''

[tool.pytest.ini_options]
norecursedirs = [
    "data/failset",
    "cpython"
]

[tool.mypy]
packages = ["pegen", "scripts", "tests"]
explicit_package_bases = true
mypy_path = ["src"]
exclude = '(tests/python_parser/(data|parser_cache)/.*)|(tests/demo.py)'

#follow_imports = "error" #?
follow_imports = "normal"
no_implicit_optional = true
strict_optional = true

enable_error_codes = ["deprecated"] #? Unrecognized?

disallow_untyped_calls = true
disallow_untyped_defs = false

disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true

warn_unused_configs = true
#warn_unused_ignores = true
warn_redundant_casts = true
warn_no_return = true
report_deprecated_as_note = true

show_traceback = true
show_column_numbers = true
show_error_end = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["pegen", "scripts"]
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = ["pegen.grammar_parser", "pegen.grammar_parser_v2"]
strict_optional = false

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = ["tests.python_parser.*"]
#disallow_untyped_defs = false
#disallow_untyped_calls = true
disable_error_code = "no-untyped-def"

[[tool.mypy.overrides]]
module = "psutil"
ignore_missing_imports = true

[tool.pyright]
reportInvalidTypeForm = "none"

[tool.coverage.run]
branch = true
parallel = true
omit = ["tests/*", "**/__init__.py", "**/pegen/__main__.py", "**/pegen/web.py"]

[tool.coverage.paths]
# Support editable installs (with -C editable_mode=strict)
source = ["src/pegen", "build/__editable__.pegen*/pegen"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma (XXX:?)
    "pragma: no cover",
    # Don't complain if tests don't hit defensive assertion code:
    "raise NotImplementedError()",
    "pass",

    "if TYPE_CHECKING:",
]
skip_covered = true
show_missing = true
