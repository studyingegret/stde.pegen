
[project]
name = "stde.pegen"
description = "CPython's PEG parser generator"
readme = "README.md"
requires-python = ">=3.8, <4"
license = "MIT"
authors = [
    {name = "Guido van Rossum"},
    {name = "Pablo Galindo", email = "pablogsal@gmail.com"},
    {name = "Lysandros Nikolaou", email = "lisandrosnik@gmail.com"},
    {name = "studyingegret", email = "a3times7@outlook.com"}
]
maintainers = []
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Compilers",
    "Topic :: Text Processing",
    "Topic :: Software Development :: Code Generators", #?
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
]
#keywords = ["parser", "CPython", "PEG", "pegen"]
keywords = ["parser", "CPython", "PEG", "pegen", "stde"]
dynamic = ["version"]

[project.optional-dependencies]
docs = ["sphinx", "sphinx-copybutton", "furo"]
lint = ["black", "flake8", "mypy", "rtoml"]
test = ["pytest", "pytest-cov"]
memory = ["psutil"]
web = ["flask", "flask-wtf"]

[project.urls]

[build-system]
requires = ["setuptools>=61.2", "wheel", "setuptools_scm[toml]>=3.4.3"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
# Do not determine package version from non-version tags
#git_describe_command = 'git describe --long --match "v[0123456789].*"'
git_describe_command = 'git describe --abbrev=0 --match "v[0123456789].*"'

[tool.black]
line-length = 99
target_version = ['py38']
exclude = '''(
      /stde/pegen/grammar_parser.py       # generated file
    | /tests/python_parser/data/          # test files
    | /tests/python_parser/parser_cache/  # generated parser
)'''

[tool.pytest.ini_options]
norecursedirs = [
    "data/failset",
    "cpython"
]

[tool.mypy]
packages = ["stde", "scripts", "tests"]
explicit_package_bases = true
namespace_packages = true
mypy_path = ["src"]
# Note: Also remember to update NEW_EXCLUDE in run_mypy.py
exclude = 'build/.*|tests/(v2/)?python_parser/(data|parser_cache)/.*|tests/legacy/demo\.py|src/stde/pegen/v2/parser_old\.py|src/stde/pegen/v2/grammar_parser\.py'

#follow_imports = "error" #?
follow_imports = "normal"
no_implicit_optional = true
strict_optional = true

#enable_error_codes = ["deprecated"] #? Unrecognized?

disallow_untyped_calls = true
disallow_untyped_defs = false

disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true

warn_unused_configs = true
#warn_unused_ignores = true
warn_redundant_casts = true
warn_no_return = true
report_deprecated_as_note = true

show_traceback = true
show_column_numbers = true
show_error_end = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["stde.pegen", "scripts"]
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = ["stde.pegen.legacy.grammar_parser"]
strict_optional = false

[[tool.mypy.overrides]]
module = ["stde.pegen.v2.grammar_parser"]
# Ignores any errors within stde.pegen.v2.grammar_parser.
# There is special handling in run_mypy.py.
follow_imports = "silent"

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = ["tests.python_parser.*", "tests.v2.python_parser.*"]
disallow_untyped_defs = false
#disallow_untyped_calls = true
disable_error_code = ["no-untyped-def"]

[[tool.mypy.overrides]]
module = "psutil"
ignore_missing_imports = true

[tool.pyright]
reportInvalidTypeForm = "none"

[tool.coverage.run]
branch = true
parallel = true
omit = [
    #"tests/*",
    # For unknown reasons it is counting these files unlike before
    "scripts/**",
    "conftest.py",
    "setup.py",
    "run_mypy.py",
    "**/__init__.py",
    "**/stde/pegen/__main__.py",
    "**/stde/pegen/web.py"
]

[tool.coverage.paths]
# Support editable installs (with -C editable_mode=strict)
source = ["src/stde", "build/__editable__.*/stde"]

[tool.coverage.report]
exclude_lines = [
    '#\s*pragma: no cover',
    # Don't complain if tests don't hit defensive assertion code:
    'raise NotImplementedError',
    'pass',

    'if TYPE_CHECKING:',
    'def main\(',
    'def simple_parser_main\(',
    '''if __name__ == ['"]__main__['"]:''',
]
skip_covered = true
show_missing = true
